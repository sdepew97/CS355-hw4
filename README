Assumptions when Coding:
* In the non-preemptive scheduling algorithms, FIFO and SJF, when a new thread is created, it is blocked. If we do not join the thread,
then it remains blocked and will never run. Only upon a thread_join is the thread able to run and the scheduler called.

Notes:
* My log is found in log.txt
* I ran the Ziting tests and took care of the deadlocking cases by returning errors for these cases; I didn't want to deadlock, so I addressed the issues and simply did not permit the joins to occur

Known Bugs:
* My yielding is not working 100% correctly for threads; I ended up having to sigprocmask too much of my code to allow successful interleaving to occur
* I have a ton of valgrind errors
* I am unable to free the context memory
* Odd error relating to priority scheduling where I run for shorter time than expected, but thread function adequately runs and reaches the end of the run
* There was one time I ran valgrind and got a segfault. I tried to recreate the error to no avail. I am wondering if there is a minor race condition that occured. I
knew about this and attempted to fix it, but was unable to recreate the issue. So, I am recording it here. This was running in Priority scheduling mode.

